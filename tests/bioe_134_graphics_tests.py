# -*- coding: utf-8 -*-
"""BioE 134 Graphics Tests.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TYXQHGh9eCQkc7kkCNPGbd6gLVM11ESW
"""

from PIL import Image, ImageDraw, ImageFont

from PIL import Image, ImageDraw, ImageFont

class Shape:
    def __init__(self, z=0):
        self.z = z

    def set_z(self, z):
        self.z = z

    def get_z(self):
        return self.z


class Rectangle(Shape):
    def __init__(self, fill = None, outline = None, width = None, z=0):
        super().__init__(z)
        # self.top_x = None
        # self.top_y = None
        # self.bottom_x = None
        # self.bottom_y = None
        self.fill = fill
        self.outline = outline
        self.width = width

    def set_top_left(self, x, y):
        self.top_x = x
        self.top_y = y

    def set_bottom_right(self, x, y):
        self.bottom_x = x
        self.bottom_y = y

    def get_parameters(self):
        return {
            "top_x": self.top_x,
            "top_y": self.top_y,
            "bottom_x": self.bottom_x,
            "bottom_y": self.bottom_y,
            "fill": self.fill,
            "outline": self.outline,
            "width": self.width,
            "z": self.z
        }

    def set_fill(self, fill):
        self.fill = fill

    def set_outline(self, outline):
        self.oultine = outline


    def set_width(self, width):
        self.width = width



class Ellipse(Shape):
    def __init__(self, fill = None, outline = None, width = None, z=0):
        super().__init__(z)
        # self.top_x = None
        # self.top_y = None
        # self.bottom_x = None
        # self.bottom_y = None
        self.fill = fill
        self.outline = outline
        self.width = width

    def set_top_left(self, x, y):
        self.top_x = x
        self.top_y = y

    def set_bottom_right(self, x, y):
        self.bottom_x = x
        self.bottom_y = y

    def get_parameters(self):
        return {
            "top_x": self.top_x,
            "top_y": self.top_y,
            "bottom_x": self.bottom_x,
            "bottom_y": self.bottom_y,
            "fill": self.fill,
            "outline": self.outline,
            "width": self.width,
            "z": self.z
        }

    def set_fill(self, fill):
        self.fill = fill

    def set_outline(self, outline):
        self.oultine = outline


    def set_width(self, width):
        self.width = width


class Line(Shape):
    def __init__(self, z=0):
        super().__init__(z)
        self.start_x = None
        self.start_y = None
        self.end_x = None
        self.end_y = None
        self.fill = None
        self.width = 1

    def set_start(self, x, y):
        self.start_x = x
        self.start_y = y

    def set_end(self, x, y):
        self.end_x = x
        self.end_y = y

    def set_fill(self, fill):
        self.fill = fill

    def set_width(self, width):
        self.width = width

    def get_parameters(self):
        return {
            "start_x": self.start_x,
            "start_y": self.start_y,
            "end_x": self.end_x,
            "end_y": self.end_y,
            "fill": self.fill,
            "width": self.width,
            "z": self.z
        }


class Text(Shape):
    def __init__(self, z=0):
        super().__init__(z)
        self.x = None
        self.y = None
        self.text = None
        self.fill = None
        self.font_size = 20

    def set_position(self, x, y):
        self.x = x
        self.y = y

    def set_text(self, text):
        self.text = text

    def set_fill(self, fill):
        self.fill = fill

    def set_font_size(self, font_size):
        self.font_size = font_size

    def get_parameters(self):
        return {
            "x": self.x,
            "y": self.y,
            "text": self.text,
            "fill": self.fill,
            "font_size": self.font_size,
            "z": self.z
        }
class Triangle(Shape):
    def __init__(self, z=0):
        super().__init__(z)
        self.vertex1 = None
        self.vertex2 = None
        self.vertex3 = None
        self.fill = None
        self.outline = None

    def set_vertex1(self, x, y):
        self.vertex1 = (x, y)

    def set_vertex2(self, x, y):
        self.vertex2 = (x, y)

    def set_vertex3(self, x, y):
        self.vertex3 = (x, y)

    def set_fill(self, fill):
        self.fill = fill

    def set_outline(self, outline):
        self.outline = outline

    def get_parameters(self):
        return {
            "vertex1": self.vertex1,
            "vertex2": self.vertex2,
            "vertex3": self.vertex3,
            "fill": self.fill,
            "outline": self.outline,
            "z": self.z
        }


class Canvas:
    def __init__(self, width, height, color_scheme="RGB", background_color="white"):
        self.width = width
        self.height = height
        self.color_scheme = color_scheme
        self.background_color = background_color
        self.image = Image.new(color_scheme, (width, height), background_color)
        self.draw = ImageDraw.Draw(self.image)
        self.shapes = []

    def add_shape(self, shape):
        self.shapes.append(shape)

    def render(self):
      self.shapes.sort(key=lambda s: s.get_z())
      for shape in self.shapes:
          if isinstance(shape, Rectangle):
              params = shape.get_parameters()
              self.draw.rectangle(
                  [(params["top_x"], params["top_y"]), (params["bottom_x"], params["bottom_y"])],
                  fill=params["fill"],
                  outline=params["outline"],
                  width=params["width"]
              )
          elif isinstance(shape, Ellipse):
              params = shape.get_parameters()
              self.draw.ellipse(
                  [(params["top_x"], params["top_y"]), (params["bottom_x"], params["bottom_y"])],
                  fill=params["fill"],
                  outline=params["outline"],
                  width=params["width"]
              )
          elif isinstance(shape, Line):
              params = shape.get_parameters()
              self.draw.line(
                  [(params["start_x"], params["start_y"]), (params["end_x"], params["end_y"])],
                  fill=params["fill"],
                  width=params["width"]
              )
          elif isinstance(shape, Text):
              params = shape.get_parameters()
              try:
                  font = ImageFont.truetype("arial.ttf", size=params["font_size"])
              except IOError:
                  font = ImageFont.load_default()
              self.draw.text(
                  (params["x"], params["y"]),
                  params["text"],
                  fill=params["fill"],
                  font=font
              )
          elif isinstance(shape, Triangle):
              params = shape.get_parameters()
              self.draw.polygon(
                  [params["vertex1"], params["vertex2"], params["vertex3"]],
                  fill=params["fill"],
                  outline=params["outline"]
              )


    def show(self):
        self.image.show()

    def save(self, filename):
        self.image.save(filename)

canvas = Canvas(500, 500)

# Rectangle
rect = Rectangle(z=1)
rect.set_top_left(50, 50)
rect.set_bottom_right(200, 200)
rect.set_fill("blue")
rect.set_outline("black")
rect.set_width(3)
canvas.add_shape(rect)

# Ellipse
ellipse = Ellipse(z=2)
ellipse.set_top_left(100, 100)
ellipse.set_bottom_right(300, 300)
ellipse.set_fill("red")
ellipse.set_outline("black")
ellipse.set_width(2)
canvas.add_shape(ellipse)

# Line
line = Line(z=0)
line.set_start(10, 10)
line.set_end(400, 400)
line.set_fill("black")
line.set_width(5)
canvas.add_shape(line)

# Text
text = Text(z=3)
text.set_position(150, 250)
text.set_text("Hello World!")
text.set_fill("black")
text.set_font_size(30)
canvas.add_shape(text)

# Triangle
triangle = Triangle(z=4)
triangle.set_vertex1(200, 50)
triangle.set_vertex2(300, 200)
triangle.set_vertex3(100, 200)
triangle.set_fill("yellow")
triangle.set_outline("black")
canvas.add_shape(triangle)

# Render and show the canvas
canvas.render()
canvas.save("JAMES_IS_A_NOOB.png")

## Z-values?

from PIL import Image, ImageDraw, ImageFont

def rectangle(top_left_x, top_left_y, bottom_right_x, bottom_right_y, fill, outline, width, z=0):
    image = Image.new('RGB', (100, 100), 'white')
    draw = ImageDraw.Draw(image)
    draw.rectangle([(top_left_x, top_left_y), (bottom_right_x, bottom_right_y)], fill=fill, outline=outline, width=width)
    return [[(top_left_x, top_left_y), (bottom_right_x, bottom_right_y)], fill, width]


def ellipse(top_left_x, top_left_y, bottom_right_x, bottom_right_y, fill, outline, width, z=0):
    image = Image.new('RGB', (100, 100), 'white')
    draw = ImageDraw.Draw(image)
    draw.ellipse([(top_left_x, top_left_y), (bottom_right_x, bottom_right_y)], fill=fill, outline=outline, width=width)
    return [[(top_left_x, top_left_y), (bottom_right_x, bottom_right_y)], fill, width]


def line(top_x, top_y, bottom_x, bottom_y, fill, width):
    image = Image.new('RGB', (100, 100), 'white')
    draw = ImageDraw.Draw(image)
    draw.line([(top_x, top_y), (bottom_x, bottom_y)], fill=fill, width=width)
    return [[(top_x, top_y), (bottom_x, bottom_y)], fill, width]


def text(x, y, text, fill, font, z=0):
    image = Image.new('RGB', (100, 100), 'white')
    draw = ImageDraw.Draw(image)
    draw.text((x, y), text, fill, font=font)
    return [[(x, y)], text, fill, font]


def triangle(vertex1, vertex2, vertex3, fill, outline):
    image = Image.new('RGB', (100, 100), 'white')
    draw = ImageDraw.Draw(image)
    draw.polygon([vertex1, vertex2, vertex3], fill=fill, outline=outline)
    return [[vertex1, vertex2, vertex3], fill, outline]

# Step 1: Define Canvas, Shape, Rectangle, Ellipse, Line, etc.
# (Copy all the relevant code for these classes from earlier responses)

# Step 2: Initialize the canvas and add shapes
canvas = Canvas(width=1200, height=800, background_color="#FFF5E5")
# Add shapes like rectangles, ellipses, lines, text, etc., based on your logic
# canvas.add_shape(...)

# Step 3: Render and save the canvas
canvas.render()
output_path = "Hippo_Pathway_Final.png"
canvas.save(output_path)

# Step 4: Display the image in Colab
from IPython.display import Image, display
display(Image(filename=output_path))

class Canvas:
    def __init__(self, width, height, color_scheme="RGB", background_color="white"):
        self.width = width
        self.height = height
        self.color_scheme = color_scheme
        self.background_color = background_color
        self.image = Image.new(color_scheme, (width, height), background_color)
        self.draw = ImageDraw.Draw(self.image)
        self.shapes = []

    def add_shape(self, shape_function, z, *args, **kwargs):
        """
        Add a shape function to the canvas with z-index for layering.
        """
        self.shapes.append((shape_function, z, args, kwargs))

    def render(self):
        """
        Renders all shapes on the canvas sorted by z-index (lower z renders first).
        """
        self.shapes.sort(key=lambda item: item[1])
        for shape_function, _, args, kwargs in self.shapes:
            shape_function(self.draw, *args, **kwargs)

    def show(self):
        self.image.show()

    def save(self, filename):
        self.image.save(filename)


# Shape Functions

def draw_rectangle(draw, x1, y1, x2, y2, fill=None, outline=None, width=1):
    draw.rectangle([(x1, y1), (x2, y2)], fill=fill, outline=outline, width=width)

def draw_ellipse(draw, x1, y1, x2, y2, fill=None, outline=None, width=1):
    draw.ellipse([(x1, y1), (x2, y2)], fill=fill, outline=outline, width=width)

def draw_line(draw, x1, y1, x2, y2, fill=None, width=1):
    draw.line([(x1, y1), (x2, y2)], fill=fill, width=width)

def draw_text(draw, x, y, text, fill="black", font_size=20):
    try:
        font = ImageFont.load_default()
    except IOError:
        font = ImageFont.load_default()
    draw.text((x, y), text, fill=fill, font=font)

def draw_triangle(draw, x1, y1, x2, y2, x3, y3, fill=None, outline=None):
    draw.polygon([(x1, y1), (x2, y2), (x3, y3)], fill=fill, outline=outline)

import matplotlib.pyplot as plt
import matplotlib.patches as patches

def draw_hippo_pathway():
    fig, ax = plt.subplots(figsize=(12, 6))

    # Background rectangles (Hippo OFF and ON)
    ax.add_patch(patches.Rectangle((0, 0), 6, 10, color="#FDF3E4", edgecolor='black'))
    ax.add_patch(patches.Rectangle((6, 0), 6, 10, color="#FDF3E4", edgecolor='black'))

    # Titles
    plt.text(3, 9.5, 'Hippo OFF', ha='center', fontsize=14, weight='bold')
    plt.text(9, 9.5, 'Hippo ON', ha='center', fontsize=14, weight='bold')

    # Labels and arrows for Hippo OFF (Left)
    plt.text(2, 8.5, "STRIPAK", color="green", fontsize=10, bbox=dict(facecolor="white", edgecolor="green"))
    plt.text(1.5, 7.5, "MST1/2", color="salmon", fontsize=10)
    plt.text(2.5, 7.5, "MAP4Ks", color="salmon", fontsize=10)
    plt.text(1, 6.5, "WWC1-3", color="purple", fontsize=10)
    plt.text(2.5, 5.5, "LATS1/2", color="salmon", fontsize=10)
    plt.text(3.5, 5.5, "MOB1", color="green", fontsize=10)
    plt.text(2.5, 4.5, "YAP/YAZ", color="orange", fontsize=10, weight='bold')

    plt.arrow(2.8, 5, 0, -1, width=0.05, color="black", head_width=0.2)  # Arrow for YAP/YAZ
    plt.text(2.8, 3.5, "TEAD1-4", color="green", fontsize=10, weight='bold')
    plt.text(2.5, 2.8, "Gene Expression ON", fontsize=10)

    # Labels and arrows for Hippo ON (Right)
    plt.text(8, 8.5, "STRIPAK", color="green", fontsize=10, bbox=dict(facecolor="white", edgecolor="green"))
    plt.text(7.5, 7.5, "MST1/2", color="salmon", fontsize=10)
    plt.text(8.5, 7.5, "MAP4Ks", color="salmon", fontsize=10)
    plt.text(7, 6.5, "WWC1-3", color="purple", fontsize=10)
    plt.text(8.5, 5.5, "LATS1/2", color="salmon", fontsize=10)
    plt.text(9.5, 5.5, "MOB1", color="green", fontsize=10)
    plt.text(8.5, 4.5, "YAP/YAZ", color="orange", fontsize=10, weight='bold')

    plt.arrow(8.8, 5, 0, -1, width=0.05, color="black", head_width=0.2)
    plt.text(8.8, 3.5, "TEAD1-4", color="green", fontsize=10, weight='bold')
    plt.text(8.5, 2.8, "Gene Expression OFF", fontsize=10)

    # Set Limits and Remove axes
    ax.set_xlim(0, 12)
    ax.set_ylim(0, 10)
    ax.axis('off')

    # Show the diagram
    plt.tight_layout()
    plt.show()

# Run the function
draw_hippo_pathway()

import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.lines as mlines

def draw_hippo_off_diagram():
    # Set up the figure and axes
    fig, ax = plt.subplots(figsize=(6, 8))
    ax.set_xlim(0, 10)
    ax.set_ylim(0, 15)
    ax.axis('off')  # Turn off axes

    # Add background
    ax.add_patch(patches.Rectangle((0, 0), 10, 15, facecolor='#FDF3E4', edgecolor=None))

    # Add plasma membrane
    ax.add_patch(patches.Rectangle((0, 14), 10, 0.5, facecolor='#D4E2F0', edgecolor=None, alpha=0.6))

    # Add STRIPAK oval
    ax.add_patch(patches.Ellipse((5, 13), 2, 1, facecolor='#84C184', edgecolor='black'))
    ax.text(5, 13, 'STRIPAK', color='black', ha='center', va='center', fontsize=10, weight='bold')

    # Add MST1/2 and MAP4Ks
    ax.add_patch(patches.FancyBboxPatch((3, 11), 1.5, 0.8, boxstyle="round,pad=0.1", facecolor='#F4C7C3'))
    ax.text(3.75, 11.4, 'MST1/2', ha='center', va='center', fontsize=9, weight='bold')

    ax.add_patch(patches.FancyBboxPatch((5.5, 11), 1.5, 0.8, boxstyle="round,pad=0.1", facecolor='#F4C7C3'))
    ax.text(6.25, 11.4, 'MAP4Ks', ha='center', va='center', fontsize=9, weight='bold')

    # Add SAV1
    ax.add_patch(patches.Ellipse((4.5, 10), 1.5, 0.8, facecolor='#84C184', edgecolor='black'))
    ax.text(4.5, 10, 'SAV1', ha='center', va='center', fontsize=9, weight='bold')

    # Add WWC1-3
    ax.add_patch(patches.FancyBboxPatch((2, 9), 1.5, 0.8, boxstyle="round,pad=0.1", facecolor='#C2A8E6'))
    ax.text(2.75, 9.4, 'WWC1-3', ha='center', va='center', fontsize=9, weight='bold')

    # Add LATS1/2 and MOB1
    ax.add_patch(patches.FancyBboxPatch((4, 8), 1.5, 0.8, boxstyle="round,pad=0.1", facecolor='#F4C7C3'))
    ax.text(4.75, 8.4, 'LATS1/2', ha='center', va='center', fontsize=9, weight='bold')

    ax.add_patch(patches.Ellipse((6, 8), 1.5, 0.8, facecolor='#84C184', edgecolor='black'))
    ax.text(6, 8, 'MOB1', ha='center', va='center', fontsize=9, weight='bold')

    # Add YAP/YAZ (cytoplasm)
    ax.add_patch(patches.FancyBboxPatch((4.75, 6), 1.5, 0.8, boxstyle="round,pad=0.1", facecolor='#F2B34C'))
    ax.text(5.5, 6.4, 'YAP/YAZ', ha='center', va='center', fontsize=9, weight='bold')

    # Dashed line connecting YAP/YAZ to nucleus
    ax.add_line(mlines.Line2D([5.5, 5.5], [6, 4.5], linestyle="--", color="black"))

    # Add YAP/YAZ (nucleus)
    ax.add_patch(patches.FancyBboxPatch((4.75, 4), 1.5, 0.8, boxstyle="round,pad=0.1", facecolor='#F2B34C'))
    ax.text(5.5, 4.4, 'YAP/YAZ', ha='center', va='center', fontsize=9, weight='bold')

    # Add TEAD1-4
    ax.add_patch(patches.FancyBboxPatch((6.3, 4), 1.5, 0.8, boxstyle="round,pad=0.1", facecolor='#84C184'))
    ax.text(7.05, 4.4, 'TEAD1-4', ha='center', va='center', fontsize=9, weight='bold')

    # Gene Expression ON
    ax.text(5.5, 3, 'Gene Expression\nON', ha='center', va='center', fontsize=9, weight='bold')

    # DNA symbol (a simple wave)
    ax.plot([4, 7], [2.5, 2.5], color='red', linewidth=2)
    ax.plot([4, 7], [2.3, 2.3], color='blue', linewidth=2)

    # Finalizing
    plt.tight_layout()
    plt.show()

# Run the function
draw_hippo_off_diagram()

